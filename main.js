(()=>{"use strict";function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}var t=function(){function t(e,n,r,o,i,u,c,a){var s=u.handleDeleteIconClick;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),this._name=e.name,this._link=e.link,this._cardSelector=n,this._handleCardClick=r,this.cardId=e._id,this.likes=e.likes,this.ownerId=e.owner._id,this.userId=i,this._handleDeleteIconClick=s,this._userRender=o,this.api=c,this._apiLike=a}var n,r;return n=t,(r=[{key:"_cardTemplate",value:function(){return document.querySelector(this._cardSelector).content.querySelector(".elements__item").cloneNode(!0)}},{key:"cardCreation",value:function(){this.element=this._cardTemplate();var e=this.element.querySelector(".elements__text"),t=this.element.querySelector(".elements__photo");return this.likeCounter=this.element.querySelector(".elements__like-counter"),e.textContent=this._name,t.src=this._link,t.alt=this._name,this.likeCounter.textContent=this.likes.length,this._setEventListener(),this.element}},{key:"_checkLike",value:function(){var e=this;this.likes.forEach((function(t){t._id==e.userId&&e.element.querySelector(".elements__heart-button").classList.add("elements__heart-button_like")}))}},{key:"_rendererDeleteButtonCard",value:function(){var e=this.element.querySelector(".elements__delete-photo");this.ownerId===this.userId&&e.classList.add("elements__delete-photo_active")}},{key:"_setEventListener",value:function(){var e=this;this.element.querySelector(".elements__heart-button").addEventListener("click",(function(){e._apiLike(e.cardId)})),this.element.querySelector(".elements__photo").addEventListener("click",(function(){e._handleCardClick(e._name,e._link)})),this.element.querySelector(".elements__delete-photo").addEventListener("click",(function(){e._handleDeleteIconClick(e.cardId,e.element)})),this._rendererDeleteButtonCard(),this._checkLike(),this._rendererDeleteButtonCard()}}])&&e(n.prototype,r),t}();function n(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}var r=function(){function e(t,n){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this._form=n,this._formSelector=t.formSelector,this._inputSelector=t.inputSelector,this._submitButtonSelector=t.submitButtonSelector,this._inactiveButtonClass=t.inactiveButtonClass,this._inputErrorClass=t.inputErrorClass,this._inputList=this._form.querySelectorAll(this._inputSelector),this._button=this._form.querySelector(this._submitButtonSelector)}var t,r;return t=e,(r=[{key:"_showError",value:function(){this._form.querySelector("#".concat(this._input.id,"-error")).textContent=this._input.validationMessage,this._input.classList.add(this._inputErrorClass)}},{key:"_hideError",value:function(){this._form.querySelector("#".concat(this._input.id,"-error")).textContent="",this._input.classList.remove(this._inputErrorClass)}},{key:"_checkInputValidity",value:function(e){this._input=e,this._input.validity.valid?this._hideError():this._showError()}},{key:"_setButtonState",value:function(e){e?(this._button.classList.remove(this._inactiveButtonClass),this._button.disabled=!1):(this._button.classList.add(this._inactiveButtonClass),this._button.disabled=!0)}},{key:"_setEventListener",value:function(){var e=this;this._inputList.forEach((function(t){t.addEventListener("input",(function(n){e._checkInputValidity(t),e._setButtonState(e._form.checkValidity())}))}))}},{key:"enableValidation",value:function(){this._setEventListener(),this._setButtonState(this._form.checkValidity())}},{key:"resetValidation",value:function(){var e=this;this._inputList.forEach((function(t){e._input=t,e._hideError(t)})),this._setButtonState(!1)}}])&&n(t.prototype,r),e}();function o(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}var i=function(){function e(t,n){var r=t.items,o=t.renderer;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this._items=r,this._renderer=o,this._containerSelector=n}var t,n;return t=e,(n=[{key:"renderItems",value:function(){var e=this;this._items.forEach((function(t){return e._renderer(t)}))}},{key:"addItem",value:function(e){this._containerSelector.append(e)}},{key:"prependItem",value:function(e){this._containerSelector.prepend(e)}}])&&o(t.prototype,n),e}();function u(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}var c=function(){function e(t){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this._popup=t,this._handleEscClose=this._handleEscClose.bind(this),this._handleMouseClose=this._handleMouseClose.bind(this),this._closePopup=this._popup.querySelector(".popup__close"),this.close=this.close.bind(this),this._submitButton=this._popup.querySelector(".popup__button")}var t,n;return t=e,(n=[{key:"open",value:function(){this._popup.classList.add("popup_opened"),document.addEventListener("keydown",this._handleEscClose),this._popup.addEventListener("click",this._handleMouseClose)}},{key:"close",value:function(){this._popup.classList.remove("popup_opened"),document.removeEventListener("keydown",this._handleEscClose),this._popup.removeEventListener("click",this._handleMouseClose)}},{key:"_handleEscClose",value:function(e){"Escape"===e.key&&this.close()}},{key:"_handleMouseClose",value:function(e){e.target.classList.contains("popup")&&this.close()}},{key:"setEventListeners",value:function(){this._closePopup.addEventListener("click",this.close)}},{key:"changeTextSubmitButton",value:function(e){this._submitButton.textContent=e}}])&&u(t.prototype,n),e}();function a(e){return(a="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function s(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function l(e,t,n){return(l="undefined"!=typeof Reflect&&Reflect.get?Reflect.get:function(e,t,n){var r=function(e,t){for(;!Object.prototype.hasOwnProperty.call(e,t)&&null!==(e=h(e)););return e}(e,t);if(r){var o=Object.getOwnPropertyDescriptor(r,t);return o.get?o.get.call(n):o.value}})(e,t,n||e)}function f(e,t){return(f=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function p(e,t){return!t||"object"!==a(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function h(e){return(h=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}var _=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&f(e,t)}(u,e);var t,n,r,o,i=(r=u,o=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}(),function(){var e,t=h(r);if(o){var n=h(this).constructor;e=Reflect.construct(t,arguments,n)}else e=t.apply(this,arguments);return p(this,e)});function u(e){var t;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,u),(t=i.call(this,e))._imgName=document.querySelector(".popup__title_img"),t._imgLink=document.querySelector(".popup__image"),t}return t=u,(n=[{key:"open",value:function(e,t){l(h(u.prototype),"open",this).call(this),this._imgName.textContent=e,this._imgLink.src=t,this._imgLink.alt=e}}])&&s(t.prototype,n),u}(c);function d(e){return(d="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function y(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function m(e,t,n){return(m="undefined"!=typeof Reflect&&Reflect.get?Reflect.get:function(e,t,n){var r=function(e,t){for(;!Object.prototype.hasOwnProperty.call(e,t)&&null!==(e=k(e)););return e}(e,t);if(r){var o=Object.getOwnPropertyDescriptor(r,t);return o.get?o.get.call(n):o.value}})(e,t,n||e)}function v(e,t){return(v=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function b(e,t){return!t||"object"!==d(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function k(e){return(k=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}var S=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&v(e,t)}(u,e);var t,n,r,o,i=(r=u,o=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}(),function(){var e,t=k(r);if(o){var n=k(this).constructor;e=Reflect.construct(t,arguments,n)}else e=t.apply(this,arguments);return b(this,e)});function u(e,t){var n;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,u),(n=i.call(this,e))._submitForm=t,n._form=n._popup.querySelector(".popup__form"),n}return t=u,(n=[{key:"_getInputValues",value:function(){var e={};return this._form.querySelectorAll(".popup__input").forEach((function(t){e[t.name]=t.value})),e}},{key:"setEventListeners",value:function(){var e=this;m(k(u.prototype),"setEventListeners",this).call(this),this._form.addEventListener("submit",(function(t){t.preventDefault(),e._submitForm(e._getInputValues())}))}},{key:"close",value:function(){m(k(u.prototype),"close",this).call(this),this._form.reset()}}])&&y(t.prototype,n),u}(c);function g(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}var w=function(){function e(t){var n=t.nameFromDoc,r=t.aboutUserFromDoc;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this._nameFromDoc=document.querySelector(n),this._aboutUserFromDoc=document.querySelector(r),this._userAvatar=document.querySelector(".profile__avatar")}var t,n;return t=e,(n=[{key:"getUserInfo",value:function(){var e={};return e.name=this._nameFromDoc,e.about=this._aboutUserFromDoc,e}},{key:"setUserInfo",value:function(e){this._nameFromDoc.textContent=e.name,this._aboutUserFromDoc.textContent=e.about}},{key:"setUserAvatar",value:function(e){this._userAvatar.src=e}},{key:"setUserId",value:function(e){this._userId=e._id}},{key:"getUserId",value:function(){return this._userId}}])&&g(t.prototype,n),e}(),E=document.querySelector(".popup_img"),C={formSelector:".popup__form",inputSelector:".popup__input",submitButtonSelector:".popup__button",inactiveButtonClass:"popup__button_disabled",inputErrorClass:"popup__input_error"},O=document.querySelector(".popup_user"),L=O.querySelector(".popup__form"),j=document.querySelector(".profile__edit-button"),P=O.querySelector(".popup__input_topform"),I=O.querySelector(".popup__input_bottomform"),q=document.querySelector(".popup_place"),B=q.querySelector(".popup__form"),T=document.querySelector(".profile__add-button"),x=document.querySelector(".elements__list"),R=document.querySelector(".popup_new-avatar"),D=document.querySelector(".profile__avatar-edit"),U=R.querySelector(".popup__form"),A=document.querySelector(".popup_areyousure");function F(e){return(F="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function V(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function N(e,t,n){return(N="undefined"!=typeof Reflect&&Reflect.get?Reflect.get:function(e,t,n){var r=function(e,t){for(;!Object.prototype.hasOwnProperty.call(e,t)&&null!==(e=G(e)););return e}(e,t);if(r){var o=Object.getOwnPropertyDescriptor(r,t);return o.get?o.get.call(n):o.value}})(e,t,n||e)}function M(e,t){return(M=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function J(e,t){return!t||"object"!==F(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function G(e){return(G=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}var H=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&M(e,t)}(u,e);var t,n,r,o,i=(r=u,o=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}(),function(){var e,t=G(r);if(o){var n=G(this).constructor;e=Reflect.construct(t,arguments,n)}else e=t.apply(this,arguments);return J(this,e)});function u(e,t){var n;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,u),(n=i.call(this,e))._buttonDelete=document.querySelector(".popup__form_areyousure"),n._deleteCard=t,n}return t=u,(n=[{key:"open",value:function(e,t){N(G(u.prototype),"open",this).call(this),this._currentCard=e,this._element=t}},{key:"setEventListeners",value:function(){var e=this;N(G(u.prototype),"setEventListeners",this).call(this),this._buttonDelete.addEventListener("submit",(function(t){t.preventDefault(),e._deleteCard(e._currentCard,e._element)}))}}])&&V(t.prototype,n),u}(c);function z(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function $(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}var K,Q=new(function(){function e(t){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this._url=t.url,this._headers=t.headers}var t,n;return t=e,(n=[{key:"getInitialCards",value:function(){return fetch("".concat(this._url,"cards"),{method:"GEt",headers:this._headers}).then((function(e){return e.ok?e.json():Promise.reject("Сервер недоступен. Ошибка: ".concat(e.status,"."))}))}},{key:"addNewCard",value:function(e){return fetch("".concat(this._url,"cards"),{method:"POST",headers:this._headers,body:JSON.stringify({name:e.name,link:e.link})}).then((function(e){return e.ok?e.json():Promise.reject("Сервер недоступен. Ошибка: ".concat(e.status,"."))}))}},{key:"getUserInfo",value:function(){return fetch("".concat(this._url,"users/me"),{method:"GET",headers:this._headers}).then((function(e){return e.ok?e.json():Promise.reject("Сервер недоступен. Ошибка: ".concat(e.status,"."))}))}},{key:"editUserInfo",value:function(e){return fetch("".concat(this._url,"users/me"),{method:"PATCH",headers:this._headers,body:JSON.stringify({name:e.name,about:e.about})}).then((function(e){return e.ok?e.json():Promise.reject("Сервер недоступен. Ошибка: ".concat(e.status,"."))}))}},{key:"editUserAvatar",value:function(e){return fetch("".concat(this._url,"users/me/avatar"),{method:"PATCH",headers:this._headers,body:JSON.stringify({avatar:e.link})}).then((function(e){return e.ok?e.json():Promise.reject("Сервер недоступен. Ошибка: ".concat(e.status,"."))}))}},{key:"putLike",value:function(e){return fetch("".concat(this._url,"cards/likes/").concat(e,"/"),{method:"PUT",headers:this._headers}).then((function(e){return e.ok?e.json():Promise.reject("Сервер недоступен. Ошибка: ".concat(e.status,"."))}))}},{key:"removeLike",value:function(e){return fetch("".concat(this._url,"cards/likes/").concat(e,"/"),{method:"DELETE",headers:this._headers}).then((function(e){return e.ok?e.json():Promise.reject("Сервер недоступен. Ошибка: ".concat(e.status,"."))}))}},{key:"deleteCard",value:function(e){return fetch("".concat(this._url,"cards/").concat(e,"/"),{method:"DELETE",headers:this._headers}).then((function(e){return e.ok?e.json():Promise.reject("Сервер недоступен. Ошибка: ".concat(e.status,"."))}))}}])&&z(t.prototype,n),e}())({url:"https://mesto.nomoreparties.co/v1/cohort-20/",headers:{"content-type":"application/json",Authorization:"43c52a6d-19a6-461e-b067-2db5e03ba70b"}});Promise.all([Q.getUserInfo(),Q.getInitialCards()]).then((function(e){var t,n,r=(n=2,function(e){if(Array.isArray(e))return e}(t=e)||function(e,t){if("undefined"!=typeof Symbol&&Symbol.iterator in Object(e)){var n=[],r=!0,o=!1,i=void 0;try{for(var u,c=e[Symbol.iterator]();!(r=(u=c.next()).done)&&(n.push(u.value),!t||n.length!==t);r=!0);}catch(e){o=!0,i=e}finally{try{r||null==c.return||c.return()}finally{if(o)throw i}}return n}}(t,n)||function(e,t){if(e){if("string"==typeof e)return $(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?$(e,t):void 0}}(t,n)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()),o=r[0],u=r[1];ee.setUserInfo(o),ee.setUserAvatar(o.avatar),K=ee.setUserId(o);var c=new i({items:u,renderer:function(e){var t=ae(e);c.addItem(t)}},x);c.renderItems()})).catch((function(e){console.log(e)}));var W=new _(E),X=new r(C,U),Y=new r(C,L),Z=new r(C,B),ee=new w({nameFromDoc:".profile__title",aboutUserFromDoc:".profile__subtitle"}),te=new H(A,(function(e,t){te.changeTextSubmitButton("Удаляю..."),Q.deleteCard(e).then((function(){t.remove()})).catch((function(e){console.log(e)})).finally((function(){te.close(),te.changeTextSubmitButton("Да")}))})),ne=new S(q,(function(e){var t={name:e["popup-name-place"],link:e["popup-link-photo"]};ne.changeTextSubmitButton("Сохранение..."),Q.addNewCard(t).then((function(e){var t=ae(e);new i({items:e,renderer:function(){}},x).prependItem(t)})).catch((function(e){console.log(e)})).finally((function(){ne.close(),ne.changeTextSubmitButton("Сохранить")}))})),re=new S(R,(function(e){re.changeTextSubmitButton("Сохранение...");var t={link:e["new-avatar-photo"]};Q.editUserAvatar(t).then((function(e){ee.setUserAvatar(e.avatar)})).catch((function(e){console.log(e)})).finally((function(){re.close(),re.changeTextSubmitButton("Сохранить")}))})),oe=new S(O,(function(e){oe.changeTextSubmitButton("Сохранение...");var t={name:e["popup-name"],about:e["popup-about"]};Q.editUserInfo(t).then((function(e){ee.setUserInfo(e)})).catch((function(e){console.log(e)})).finally((function(){oe.close(),oe.changeTextSubmitButton("Сохранить")}))}));function ie(e){var t=this,n=this.element.querySelector(".elements__heart-button");n.classList.contains("elements__heart-button_like")?this.api.removeLike(e).then((function(e){t.likeCounter.textContent=e.likes.length,n.classList.remove("elements__heart-button_like")})).catch((function(e){console.log(e)})):this.api.putLike(e).then((function(e){t.likeCounter.textContent=e.likes.length,n.classList.add("elements__heart-button_like")})).catch((function(e){console.log(e)}))}function ue(e,t){W.open(e,t)}function ce(e){e.enableValidation()}function ae(e){return new t(e,".template__elements-list",ue,K,ee.getUserId(),{handleDeleteIconClick:function(e,t){te.open(e,t)}},Q,ie).cardCreation()}te.setEventListeners(),W.setEventListeners(),oe.setEventListeners(),ne.setEventListeners(),re.setEventListeners(),ce(Y),ce(Z),ce(X),D.addEventListener("click",(function(){re.open(),X.resetValidation()})),j.addEventListener("click",(function(){oe.open(),Y.resetValidation();var e=ee.getUserInfo(),t=e.name,n=e.about;P.value=t.textContent,I.value=n.textContent})),T.addEventListener("click",(function(){ne.open(),Z.resetValidation()}))})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,